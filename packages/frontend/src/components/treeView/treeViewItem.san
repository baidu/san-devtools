<template>
    <div class="sm-tree-view-item {{itemClass}} {{selectedClass}} {{checkedClass}}"
        on-click="toggleTreeView($event)"
        on-dblclick="toggleTreeView($event, 'DBL_CLICK')"
        style="{{itemStyle}}"
    >
        <div class="pad {{selectedClass}} tree-view-type-{{type}}" s-if="renderable">
            <div s-if="{{!disableRipple && !disabled}}"
                style="{{touchRippleStyle}}"
                class="sm-touch-ripple {{selectedClass}} {{hiddenClass}}"
            >
                <div s-if="delete" on-click="deleteItem" class="sm-tree-view-item-del">
                    <san-icon type="delete"></san-icon>
                </div>
            </div>
            <div class="sm-tree-view-item-content {{selectedClass}}
                        {{hiddenClass}}"
                style="{{itemContentStyle}}"
            >
                <san-checkbox
                    s-if="checked === true || checked === false"
                    s-ref="checkbox"
                    defaultChecked="{{checkboxValue}}"
                    disabled="{{disabled}}"
                    checked="{=checkboxInputValue=}"
                    indeterminate="{=checkboxIndeterminate=}"
                    on-change="checkboxChanged($event)"
                    on-click="checkboxClicked($event)"
                />
                <div
                    style="margin-bottom: 0;"
                    class="sm-tree-view-item-primary-text"
                    s-if="displayName"
                >
                    <span>{{displayName}}</span>
                    <span s-for="extra in extras">
                        <span
                            s-if="{{extra.text}}"
                            class="sm-tree-view-item-primary-text-extra"
                        >
                            {{extra.text}}
                        </span>
                    </span>
                </div>
                <p class="sm-tree-view-item-secondary-text"
                    s-if="treeData.id"
                >
                    {{treeData.id | raw}}
                </p>
            </div>
            <div
                s-ref="expand"
                class="sm-tree-view-item-expand {{selectedClass}}
                        {{hiddenClass}}"
                s-if="toggleNested"
                on-click="toggleTreeView($event, 'EXPAND', false, true)"
                style="{{expandStyle}}"
            >
                <san-icon type="caret-{{ open | treeViewOpenIcon }}">
                </san-icon>
            </div>
            <div class="sm-tree-view-item-nested {{ open | treeViewOpen }}"
                style="{{nestedTreeViewStyle}}"
            >
                <slot name="nested" s-if="dataSource!=='JSON'"></slot>
                <san-tree-view-item
                    delete="{{delete}}"
                    type="{{type}}"
                    defaultSelectedIdPath="{{defaultSelectedIdPath}}"
                    s-else
                    s-for="item, index in treeData.treeData"
                    s-ref="{{ref}}_{{index}}"
                    index="{{index}}"
                    ref="{{ref}}_{{index}}"
                    componentId="{{item.id}}"
                    treeData="{=item=}"
                    filterText="{{filterText}}"
                    initiallyOpen="{{initiallyOpen}}"
                    dataSource="JSON"
                    selectedId="{{selectedId}}"
                >
                </san-tree-view-item>
            </div>
        </div>
    </div>
</template>
<script>
    // TODO: 代码优化😣
    import san, { DataTypes } from 'san';
    import { connectStore, store } from '@frontend/store/index';
    import { Icon, Button, Checkbox } from 'santd';

    export default {
        dataTypes: {
            disabled: DataTypes.bool,
            hidden: DataTypes.bool,
            renderable: DataTypes.bool,
            index: DataTypes.number,
            selected: DataTypes.bool,
            disableRipple: DataTypes.bool,
            primaryTogglesNestedTreeView: DataTypes.bool,
            initiallyOpen: DataTypes.bool,
            compact: DataTypes.bool,
            wholeLineSelected: DataTypes.bool,
            keepingSelected: DataTypes.bool,
            checked: DataTypes.bool,
            nestedLevel: DataTypes.number,
            secondaryTextLines: DataTypes.number,
            lastExpandingState: DataTypes.bool,
            checkboxValue: DataTypes.string,
            checkboxInputValue: DataTypes.array,
            checkboxIndeterminate: DataTypes.bool,
            filterText: DataTypes.string,
            filtered: DataTypes.bool,
            primaryText: DataTypes.string,
            secondaryText: DataTypes.oneOfType([DataTypes.string, DataTypes.number]),
            extras: DataTypes.arrayOf(DataTypes.objectOf(DataTypes.string))
        },
        deleteItem(e) {
            e.stopPropagation();
            this.dispatch(
                'UI:clearTreeData',
                {
                    id: this.data.get('treeData.id'),
                    displayName: this.data.get('displayName')
                }
            );
        },
        components: {
            'san-checkbox': Checkbox,
            'san-icon': Icon,
            'san-button': Button,
            'san-tree-view-item': 'self'
        },

        messages: {
            'UI:nested-counter'(arg) {
                let target = arg.value;
                target.set('nestedLevel', target.get('nestedLevel') + 1);
                this.dispatch('UI:nested-counter', target);
            },
            'UI:tree-view-item-hidden'(arg) {
                let childHidden = arg.value;
                this.data.set('hidden', childHidden && this.data.get('hidden'));
            },
            'UI:expand-parent-tree-view-item'(arg) {
                if (typeof arg.value === 'object') {
                    if (arg.value.old === ''
                        && this.data.get('lastExpandingState') === null) {
                        this.data.set('lastExpandingState', this.data.get('open'));
                    }
                }
                this.toggleTreeView(document.createEvent('MouseEvent'), '',
                    true, false);
            },
            'UI:query-data-source-attribute'(arg) {
                let target = arg.target;
                if (target.data.get('dataSource') === undefined) {
                    target.data.set('dataSource', this.data.get('dataSource'));
                }
            },
            'UI:query-parent-checkbox-state'(arg) {
                this.dispatch('UI:query-parent-checkbox-state');
                let child = arg.target;
                if (!child) {
                    return;
                }
                let checked = this.data.get('checked');
                if (typeof checked !== 'boolean') {
                    return;
                }
                if (child.data.get('checked') !== true) {
                    child.data.set('checked', checked);
                }
                if (checked === true) {
                    child.data.set('checked', checked);
                }
            }
        },

        initData() {
            return {
                nestedLevel: 1,
                secondaryTextLines: 1,
                lastExpandingState: null,
                checkboxValue: 'ON',
                checkboxInputValue: [],
                checkboxIndeterminate: false,
                filterText: '',
                filtered: true,
                /* 是否可用 */
                disabled: false,
                /* 是否隐藏（高亮过滤时启用） */
                hidden: false,
                /* 是否选中 */
                selected: false,
                /* 是否取消波纹效果 */
                disableRipple: false,
                /* 点击时优先展开/折叠子项 */
                primaryTogglesNestedTreeView: true,
                /* 初始展开状态 */
                initiallyOpen: false,
                /* 复选框状态
                （null：禁用，undefined：由父项决定，true：选中，false：未选中） */
                checked: null,
                /* 数据源
                （ATTRIBUTE：属性定义（静态），JSON：传入 treeData 数据定义（动态）） */
                dataSource: 'ATTRIBUTE'
            };
        },

        filters: {
            treeViewOpenIcon(open) {
                return open ? 'down' : 'up';
            },
            treeViewOpen(open) {
                this.data.set('shown', open);
                return open ? '' : 'hide';
            }
        },

        computed: {
            itemStyle() {
                return {
                    'margin-left': this.data.get('nestedLevel') === 1
                        ? 0
                        : this.data.get('rippleMarginLeft') + 'px'
                };
            },
            itemContentStyle() {
                let paddingLeftHasLeft = this.data.get('compact') ? '32px' : '64px';
                let paddingLeftWithoutLeft
                    = this.data.get('compact') ? '6px' : '16px';
                return {
                    'margin-left': this.data.get('contentMarginLeft') + 'px',
                    'padding-left': this.data.get('hasLeft')
                        ? paddingLeftHasLeft
                        : paddingLeftWithoutLeft
                };
            },
            expandStyle() {
                return {
                    transform: this.data.get('open') ? 'rotate(0)' : 'rotate(90deg)'
                };
            },
            touchRippleStyle() {
                let level = this.data.get('nestedLevel');
                let leftNormal = this.data.get('wholeLineSelected')
                    ? ((1 - level) * this.data.get('rippleMarginLeft'))
                    : this.data.get('contentMarginLeft');
                let leftCompact = this.data.get('wholeLineSelected')
                    ? ((1 - level) * this.data.get('rippleMarginLeft'))
                    : this.data.get('contentMarginLeft');
                if (!leftNormal || !leftCompact) {
                    return;
                }

                return {
                    left: this.data.get('compact') ? leftCompact + 'px'
                        : leftNormal + 'px'
                };
            },
            selectedClass() {
                return this.data.get('selected') ? 'selected' : '';
            },
            checkedClass() {
                return this.data.get('checked') === true ? 'checked' : '';
            },
            hiddenClass() {
                return !this.data.get('filtered') ? 'hidden' : '';
            },
            itemClass() {
                return (this.data.get('disabled') ? 'disabled ' : '')
                    + (this.data.get('toggleNested') ? 'nested ' : '')
                    + (this.data.get('compact') ? 'compact' : '');
            }
        },

        updated() {
            const selectedId = this.data.get('selectedId');
            const shouldSelected = selectedId === this.data.get('treeData.id');
            const isSelected = this.data.get('selected');
            if (shouldSelected !== isSelected) {
                this.data.set('selected', !isSelected);
            }
        },

        inited() {
            this.data.set('defaultSelectedIdentity',
                this.parentComponent.data.get('defaultSelectedIdentity'));
            this.data.set('checked', this.data.get('checked'));
            this.data.set('open', this.data.get('initiallyOpen'));
            this.data.set('dataSource',
                (this.data.get('dataSource') || '').toUpperCase());

            this.dispatch('UI:nested-counter', this.data);

            this.dispatch('UI:query-compact-attribute');
            this.dispatch('UI:query-whole-line-selected-attribute');
            this.dispatch('UI:query-keeping-selected-attribute');
            this.dispatch('UI:query-data-source-attribute');

            if (this.data.get('dataSource') === 'JSON') {
                this.initFromTreeData(this.data.get('treeData'));
            }
            else {
                this.generateTreeData();
            }

            this.watch('treeData.text', value => {
                this.data.get('treeData') && this.data.set('displayName', value);
            });
            this.watch('treeData.displayName', value => {
                this.data.get('treeData') && this.data.set('displayName', value + '');
            });
            this.watch('treeData.extras', value => {
                this.data.get('treeData') && this.data.set('extras', value);
            });

            this.watch('filterText', this.doFilter.bind(this));
            this.watch('filtered', value => {
                this.watchFiltered(value);
            });

            this.watch('treeData.checked', value => {
                this.data.set('checked', value, { silence: true });
                this.data.set('checkboxInputValue',
                    value ? [this.data.get('checkboxValue')] : [''], {
                        silence: true
                    }
                );
                let index = this.data.get('index');
                this.parentComponent
                    && this.parentComponent.data.set(
                        'treeData.treeData[' + index + '].checked', value,
                        { silence: true });
            });
            this.watch('treeData.indeterminate', value => {
                this.data.set('checkboxIndeterminate', value, { silence: true });
                let index = this.data.get('index');
                this.parentComponent
                    && this.parentComponent.data.set(
                        'treeData.treeData[' + index + '].indeterminate', value,
                        { silence: true });
            });

            this.watch('checkboxInputValue', value => {
                this.data.set('treeData.checked',
                    value && value.toString() !== '');
                this.data.set('checked', value && value.toString() !== '', {
                    silence: true
                });
                this.parentComponent
                    && this.parentComponent.subTag === this.subTag
                    && this.parentComponent.updateSelfCheckboxStateFromChilds();
            });

            this.watch('checked', value => {
                this.data.set('treeData.checked', value);
                if (value === null) {
                    return;
                }
                this.data.set('checkboxInputValue',
                    value ? [this.data.get('checkboxValue')] : ['']);
            });

            this.watch('checkboxIndeterminate', value => {
                this.data.set('treeData.indeterminate', value);
            });

            this.dispatch('UI:query-parent-checkbox-state');
        },

        doFilter(value) {
            if (this.data.get('type') === 'storePanel') {
                this.componentFilter(value);
            } else {
                this.storeFilter(value);
            }
        },

        storeFilter(value) {
            if (!value || value === '[]') {
                this.data.set('filtered', true);
                return;
            }
            // demo: [58,]<setCount>test.b.c
            // res[0]: 匹配的全字符
            // res[1]: 子表达式匹配到的字符,表示搜索的 id 范围，闭区间
            // res[2]: id 的下界
            // res[3]: id 的上界
            // res[4]: 子表达式匹配的字符，表示属性的链式结构<test.b.c>
            // res[5]: 属性的链式结构字符串
            // res[6]: 子表达式匹配的字符,可以直接搜索名字
            let res = /(\[(\d*),(\d*)\])?(\<(.*)\>)?(.*)/.exec(value);
            if (!res) {
                return;
            }
            let id = this.data.get('treeData.id');
            let idMatched = true;
            let textMatched = true;
            let storeDataAttribute = true;
            // 处理 id
            if (res[1] !== undefined) {
                idMatched = this.idFilter(id, res[2], res[3]);
            }
            // 处理属性
            if (res[4] !== undefined) {
                storeDataAttribute = this.storeChangedTargetFilter(res[5]);
            }
            // 处理 text
            if (res[6] !== undefined) {
                let displayName = this.data.get('displayName');
                let extras = this.data.get('extras');
                extras = Array.isArray(extras) ? extras.map(item => item ? item.text : '') : [];
                let text = [].concat([displayName], extras);
                let reg;
                try {
                    reg = new RegExp(res[6], 'ig');
                } catch(err) {return;}
                textMatched = res[6] ? reg.test(text) : true;
            }
            let matched = idMatched && textMatched && storeDataAttribute;
            this.data.get('filtered') === matched
                ? this.watchFiltered(matched)
                : this.data.set('filtered', matched);
        },

        componentFilter(value) {
            if (!value) {
                this.data.set('filtered', true);
                return;
            }
            let id = this.data.get('treeData.id');
            let displayName = this.data.get('displayName');
            let extras = this.data.get('extras');
            extras = Array.isArray(extras) ? extras.map(item => item ? item.text : '') : [];
            let text = [].concat([displayName, id], extras);
            let reg;
            try {
                reg = new RegExp(value, 'ig');
            } catch(err) {return;}

            let matched = text ? reg.test(text) : true;
            this.data.get('filtered') === matched
                ? this.watchFiltered(matched)
                : this.data.set('filtered', matched);
        },

        idFilter(id, low, high) {
            let lowId = low ? +low : 0;
            let highId = high ? +high : 1073741823;
            if (lowId > highId) {
                return true;
            }
            if (id === undefined) {
                return false;
            }
            if (!isNaN(+id)) {
                return id >= lowId && id <= highId;
            }
            return true;
        },

        storeChangedTargetFilter(value) {
            let {changedTarget} = this.data.get('treeData');
            if (changedTarget) {
                if (changedTarget.indexOf(value) > -1) {
                    return true;
                }
                else {
                    return false
                }
            }
            return false;
        },

        attached() {
            this.doFilter(this.data.get('filterText'));
            let index = this.data.get('index');
            setTimeout(() => {
                this.data.set('renderable', true);
            }, index);

            const defaultSelectedIdentity = this.data.get('defaultSelectedIdentity');
            const componentId = this.data.get('componentId');
            if (defaultSelectedIdentity && componentId && defaultSelectedIdentity === componentId) {
                let evt = document.createEvent('MouseEvent');
                this.toggleTreeView(evt, 'FORCE');
            }

            let slotChildren = this.slotChildren;
            let hasLeft = 0;

            for (let slot of slotChildren) {
                if (slot.name === 'left') {
                    hasLeft++;
                }
            }
            this.data.set('hasLeft', hasLeft);

            this.watch('selected', value => {
                this.fire('selectedToggle', value);
            });

            this.watch('hidden', value => {
                this.fire('hiddenToggle', value);
            });

            this.watch('defaultSelectedIdPath', value => {
                let componentId = this.data.get('componentId');
                let open = this.data.get('open');
                let idPath = value.split(',').map(m => m + '');
                if (
                    !open
                    && idPath.indexOf(componentId + '') > -1
                ) {
                    let expandEl = this.ref('expand');
                    if (expandEl && typeof expandEl.click === 'function') {
                        expandEl.click();
                    }
                }
                if (idPath.slice(-1)[0] + '' === componentId + '') {
                    if (this.el && typeof this.el.click === 'function') {
                        this.el.click();
                    }
                }
            })

            this.watch('treeData', value => {
                this.doFilter(this.data.get('filterText'));
                if (this.data.get('dataSource') !== 'JSON') {
                    return;
                }
                if (!value || typeof value !== 'object') {
                    return;
                }
                let treeData = value.treeData;
                this.data.set('toggleNested',
                    treeData && (treeData instanceof Array) && treeData.length > 0);
            });
            this.watch('treeData.treeData', value => {
                san.nextTick(function () {
                    this.updateSelfCheckboxStateFromChilds();
                }, this);
            });

            if (typeof this.data.get('treeData') === 'object') {
                this.data.set('treeData.checked', this.data.get('checked'));
                this.data.set('treeData.indeterminate',
                    this.data.get('checkboxIndeterminate'));
            }

            this.updateSelfCheckboxStateFromChilds();

            this.treeView = this.getTreeView();
            this.filterInputBoxEl = this.treeView
                && this.treeView.ref('filterInputBox')
                && this.treeView.ref('filterInputBox').el.querySelector('input');
        },

        detached() {
            this.data.get('dataSource') !== 'JSON'
                && this.parentComponent
                && this.parentComponent.subTag === this.subTag
                && this.parentComponent.updateSelfCheckboxStateFromChilds();
        },

        created() {
        },

        disposed() {
            if (typeof checked === 'boolean') {
                this.dispatch('UI:query-parent-checkbox-state');
            }
        },

        watchFiltered(filtered) {
            let parent = this.parentComponent;
            if (!filtered) {
                do {
                    let parentFiltered = parent.data.get('filtered');
                    if (parentFiltered) {
                        this.data.set('filtered', true);
                    }
                } while (parent = parent.parentComponent);
            }
        },

        getTreeView() {
            let parent = this.parentComponent;
            do {
                if (parent && parent.data.get('rootTreeView')) {
                    return parent;
                }
            } while (parent = parent.parentComponent);
            return null;
        },

        toggleTreeView(evt, driver, forceOpen = false, forceSelected = true) {
            evt.stopPropagation();

            if (driver !== 'DBL_CLICK') {
                let treeData = this.data.get('treeData');
                this.dispatch('UI:tree-view-item-click', treeData);
            }

            if (this.data.get('disabled')) {
                return;
            }
            if ((evt.target && evt.target.tagName !== 'LABEL'
                && evt.target.tagName !== 'INPUT')
                || (driver === 'FORCE')) {
                // this.fire('click', {event: evt, comp: this});
                this.dispatch('EVENT:click', { event: evt, comp: this });
            }

            if (driver === 'EXPAND' || forceSelected) {
                this.toggleRipple();
            }

            if (driver !== 'EXPAND' && !forceOpen
                && !this.data.get('primaryTogglesNestedTreeView')
                || (evt && evt.target && (evt.target.tagName === 'INPUT'
                    || evt.target.tagName === 'LABEL'))) {
                return;
            }

            if (driver === 'EXPAND' || driver === 'DBL_CLICK') {
                let open = this.data.get('open');
                this.data.set('open', forceOpen ? true : !open);
                this.fire('nestedTreeViewToggle', open);
            }
        },

        checkboxChanged(evt) {
            evt.stopPropagation();

            let value = this.data.get('checkboxInputValue');
            let checked = value && value.toString() !== '';
            this.data.set('checked', checked);
            this.updateChildsCheckboxState(checked, 'checkbox');

            this.fire('checkboxClick',
                { event: evt, comp: this.ref('checkbox'), checked: checked });
        },

        clearSelectedClass(send) {
            this.data.get('selected') === true
                && this.data.set('selected', false);
            send && this.dispatch('UI:clear-selected-item');
        },

        toggleRipple() {
            if (this.data.get('keepingSelected')) {
                if (this.data.get('selected')
                    && !this.data.get('primaryTogglesNestedTreeView')) {
                    return;
                }
                this.clearSelectedClass(true);
                this.data.set('selected', true);
                this.dispatch('UI:selectedid-change', this.data.get('treeData.id'));
                this.dispatch('UI:record-selected-item');
            }
        },

        updateChildsCheckboxState(value, driver) {
            this.data.set('checkboxInputValue',
                value ? [this.data.get('checkboxValue')] : ['']);
            this.hasNestedSlotChilds()
                ? this.updateSlotChildsCheckboxState(value)
                : this.updateJsonChildsCheckboxState(value);
            if (driver === 'checkbox' && this.parentComponent
                && this.parentComponent.subTag === this.subTag) {
                this.parentComponent.updateSelfCheckboxStateFromChilds();
            }
        },

        hasNestedSlotChilds() {
            let slotChildren = this.slotChildren;
            if (slotChildren.length <= 0) {
                return false;
            }
            for (let i of slotChildren) {
                if (i.name !== 'nested') {
                    continue;
                }
                for (let j of i.childs) {
                    if (j.subTag === this.subTag) {
                        return true;
                    }
                }
            }
            return false;
        },

        getNestedAndCheckedSlotChilds() {
            let items = [];
            let slotChildren = this.slotChildren;
            if (!slotChildren) {
                return items;
            }
            if (slotChildren.length <= 0) {
                return items;
            }
            for (let i of slotChildren) {
                if (i.name !== 'nested') {
                    continue;
                }
                for (let j of i.childs) {
                    if (!j.el || !j.el.parentNode) {
                        continue;
                    }
                    if (j.subTag !== this.subTag || !j.owner) {
                        continue;
                    }
                    if (typeof j.data.get('checked') !== 'boolean') {
                        continue;
                    }
                    items.push(j);
                }
            }
            return items;
        },

        getNestedAndCheckedJsonChilds() {
            let items = [];
            let treeData = this.data.get('treeData');
            if (!treeData || typeof treeData !== 'object'
                || !(treeData.treeData instanceof Array)) {
                return items;
            }
            let count = treeData.treeData.length;
            if (count === 0) {
                return items;
            }
            for (let i = 0; i < count; i++) {
                let childComp = this.ref('item_' + i);
                if (!childComp || childComp.subTag !== this.subTag) {
                    continue;
                }
                if (typeof childComp.data.get('checked') !== 'boolean') {
                    continue;
                }
                items.push(childComp);
            }
            return items;
        },

        getParentHavingCheckbox() {
            let parent = this.parentComponent;
            if (!parent || parent.subTag !== this.subTag) {
                return null;
            }
            let checked = parent.data.get('checked');
            if (typeof checked !== 'boolean') {
                return null;
            }
            return parent;
        },

        hasChildHavingCheckbox() {
            let childs = this.getNestedAndCheckedSlotChilds();
            if (!childs || childs.length <= 0) {
                childs = this.getNestedAndCheckedJsonChilds();
                if (!childs || childs.length <= 0) {
                    return false;
                }
            }
            for (let i of childs) {
                if (typeof i.data.get('checked') === 'boolean') {
                    return true;
                }
            }
            return false;
        },

        updateSlotChildsCheckboxState(value) {
            let childs = this.getNestedAndCheckedSlotChilds();
            for (let i of childs) {
                i.data.set('checked', value);
                i.updateChildsCheckboxState(value);
            }
        },

        updateJsonChildsCheckboxState(value) {
            let childs = this.getNestedAndCheckedJsonChilds();
            for (let i of childs) {
                i.data.set('checked', value);
                i.updateChildsCheckboxState(value);
            }
        },

        updateSelfCheckboxStateFromChilds() {
            let childs = this.getNestedAndCheckedSlotChilds();
            if (!childs || childs.length <= 0) {
                childs = this.getNestedAndCheckedJsonChilds();
                if (!childs || childs.length <= 0) {
                    this.data.set('checkboxIndeterminate', false);
                    return;
                }
            }
            if (this.data.get('checked') === null) {
                return;
            }
            let subChecked;
            let count = 0;
            for (let i of childs) {
                let childChecked = i.data.get('checked');
                if (typeof childChecked !== 'boolean') {
                    continue;
                }
                let childIndeterminate = i.data.get('checkboxIndeterminate');
                if (childIndeterminate) {
                    this.data.set('checkboxIndeterminate', true);
                    if (this.data.get('checked') === undefined) {
                        this.data.set('checked', false);
                    }
                    return;
                }
                if (subChecked === undefined) {
                    subChecked = childChecked << count;
                }
                else {
                    subChecked |= childChecked << count;
                }
                count++;
            }
            if (subChecked !== undefined) {
                this.data.set('checked',
                    (subChecked === (1 << count) - 1));
                this.data.set('checkboxIndeterminate',
                    (subChecked > 0 && subChecked < (1 << count) - 1));
            }
            let parent = this.getParentHavingCheckbox();
            if (parent) {
                return parent.updateSelfCheckboxStateFromChilds();
            }
        },

        initFromTreeData(data) {
            !data && (data = this.data.get('treeData'));
            if (!data || !(data instanceof Object)) {
                return;
            }
            this.data.set('toggleNested', !!data.treeData);
            this.data.set('displayName', data.text);
            this.data.set('displayName', data.displayName + '');
            this.data.set('extras', data.extras);
            this.data.set('open', data.treeData && data.treeData.length > 0);
            let checked = data.checked;

            this.data.set('checked', checked);
            this.data.set('checkboxInputValue',
                checked
                    ? [this.data.get('checkboxValue')]
                    : [],
                {
                    silence: true
                }
            );
        },

        generateTreeData() {
            let data = {
                text: this.data.get('displayName'),
                displayName: this.data.get('displayName'),
                extras: this.data.get('extras'),
                checked: this.data.get('checked')
            };
            this.data.set('treeData', data, {
                silence: true
            });
            let checked = this.data.get('checked');
            this.data.set('checked', checked);
            this.data.set('checkboxInputValue',
                checked ? [this.data.get('checkboxValue')] : ['']);
        }
    }
</script>
<style lang="less">
    @import '@frontend/views/style/variables.less';
    @one-line-height: 48px;
    @two-line-height: 72px;
    @tree-view-padding-horz: 16px;
    @one-line-height-compact: 31px;
    @two-line-height-compact: 48px;
    @tree-view-padding-horz-compact: 4px;
    .sm-tree-view-item {
        position: relative;
        cursor: pointer;
        &-del {
            display: none;
            width: 20px;
        }
        &.disabled {
            cursor: not-allowed;
            color: #e0e0e0;
        }
        .sm-tree-view-item-right,
        .sm-tree-view-item-left {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            right: @tree-view-padding-horz;
        }
        .sm-tree-view-item-left {
            left: @tree-view-padding-horz;
            right: initial;
            .sm-checkbox {
                position: absolute;
                top: 50%;
                transform: translateY(-50%);
            }
        }
        .sm-tree-view-item-right {
            pointer-events: none;
        }
        .sm-icon {
            display: block;
        }
        .sm-tree-view-item-expand {
            display: flex;
            flex-direction: column;
            justify-content: center;
            position: absolute;
            top: 0;
            left: 0;
            width: @one-line-height;
            height: @one-line-height;
            border-radius: 100%;
            text-align: center;
            .sm-icon-close {
                transform: rotate(90deg);
            }
            .sm-icon {
                line-height: 48px;
            }
        }
        .sm-tree-view-item-content {
            position: relative;
            line-height: 31px;
            padding: 12px;
            font-size: 16px;
            z-index: 1;
            background-color: transparent;
            pointer-events: none;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            .sm-checkbox {
                pointer-events: auto;
                vertical-align: middle;
                zoom: 1;
            }
            .sm-tree-view-item-primary-text {
                display: inline-block;
                vertical-align: middle;
                height: 31px;
                line-height: 31px;
                &-extra {
                    :first-child {
                        margin-left: 0;
                    }
                    margin-left: 3px;
                    border-radius: 9px;
                    -webkit-text-fill-color: @extra-font-color;
                    padding: 0 6px;
                    background-color: @extra-bg-color;
                    font-size: 12px;
                    height: 16px;
                    display: inline-block;
                }
            }
        }
        .sm-touch-ripple,
        &.nested .sm-touch-ripple {
            height: @one-line-height;
        }
        .sm-tree-view-item-action {
            position: absolute;
            top: 0;
            width: 20px;
            right: 50px;
            bottom: 0;
            overflow: hidden;
            z-index: 0;
            border-radius: 6px;
        }
        .sm-touch-ripple {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            overflow: hidden;
            z-index: 0;
            border-radius: 6px;
            display: flex;
            flex-direction: row;
            justify-content: flex-end;
            align-items: center;
            &:hover {
                .sm-tree-view-item-del {
                    position: relative;
                    display: block;
                    right: 60px;
                    color: #adadad;
                }
            }
        }
        .sm-tree-view-item-primary-text {
            font-size: 16px;
        }
        .sm-tree-view-item-secondary-text {
            font-size: 14px;
            line-height: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            -webkit-box-orient: vertical;
            cursor: pointer;
        }
    }
    .show {
        display: block;
    }
    .hide {
        display: none;
    }
    .sm-tree-view-item.compact {
        .sm-tree-view-item-content {
            font-size: 0.9em;
        }
        .sm-tree-view-item-primary-text {
            font-size: 0.9em;
            height: 18px;
            line-height: 18px;
        }
        .sm-tree-view-item-content {
            padding: 0 3px;
            .sm-checkbox {
                zoom: 0.75;
            }
            .sm-tree-view-item-extras {
                position: absolute;
                top: 3px;
                zoom: 0.7;
            }
        }
        .sm-touch-ripple,
        &.nested .sm-touch-ripple {
            height: @one-line-height-compact;
        }
        .sm-tree-view-item-expand {
            width: @one-line-height-compact;
            height: @one-line-height-compact;
            .sm-icon {
                line-height: 31px;
            }
            .santd-icon {
                color: @expand-icon-color;
            }
        }
        .sm-tree-view-item-left {
            left: @tree-view-padding-horz-compact;
        }
    }
    .sm-tree-view-item.compact {
        .hidden {
            display: none;
        }
    }

    .san-devtools-dark {
        .sm-tree-view-item {
            .sm-tree-view-item-content {
                .sm-tree-view-item-primary-text {
                    &-extra {
                        -webkit-text-fill-color: @dark-extra-font-color;
                        background-color: @dark-extra-bg-color;
                    }
                }
            }
        }
        .sm-tree-view-item.compact {
            .sm-tree-view-item-expand {
                .santd-icon {
                    color: @dark-expand-icon-color;
                }
            }
        }
    }
</style>
