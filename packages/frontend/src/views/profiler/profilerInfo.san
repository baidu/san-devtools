<template>
    <div class="sand-profiler-info-wrap">
        <div class="sand-profiler-action">
            <san-tooltip
                class="sand-profiler-action-btns"
                placement="bottomRight"
                title="{{ recording ? 'start record' : 'stop record' }}"
            >
                <span
                    class="sand-profiler-action-icon"
                    on-click="record"
                >
                    <san-icon type="{{ recording ? 'stop-record' : 'start-record' }}"></san-icon>
                </span>
            </san-tooltip>
            <san-tooltip
                class="sand-profiler-action-btns {{recording ? 'sand-profiler-action-btns-disabled' : ''}}"
                placement="bottomRight"
                title="inspect flame"
            >
                <span
                    class="sand-profiler-action-icon"
                    on-click="flameClick"
                >
                    <san-icon type="flame" options="{{flameOptions}}"></san-icon>
                </span>
            </san-tooltip>
            <san-drop-down class="sand-profiler-action-drop" placement="bottomCenter">
                <san-menu
                    selectedKeys="{{selectedKeys}}"
                    on-click="menuClick"
                    slot="overlay">
                    <san-menu-item s-for="time,index in profilerTime" key="{{index}}" disabled="{{recording}}">
                        <span>{{time}}</span>
                    </san-menu-item>
                </san-menu>
                <span>{{currentTime}}<santd-icon class="sand-drop-icon" type="left"/></span>
            </san-drop-down>
        </div>
        <div class="sand-profiler-content">
            <div class="sand-profiler-info-table" s-if="data.length > 0">
                <san-table
                    pagination="{{false}}"
                    columns="{{columns}}"
                    data="{{data}}"
                    bordered="{{true}}"
                >
                </san-table>
            </div>
            <div class="sand-guide" s-else>Please select a component to inspect the detailed performance data.</div>
            <div class="sand-pie-wrap" style="visibility: {{data.length > 0 ? 'visible' : 'hidden'}}">
                <div class="sand-pie-title">生命周期平均耗时(average time)</div>
                <div id="sand-pie" class="sand-pie"></div>
            </div>
        </div>
        <div class="{{showFlame ? 'sand-d3-flame-wrapper' : 'sand-d3-flame-wrapper-hide'}}">
            <div class="sand-d3-flame-header">
                <div class="sand-d3-flame-header-title">FLAME GRAPH for {{currentTime}}</div>
                <div class="sand-d3-flame-header-filter">
                    <sand-input
                        placeholder="Find Flame"
                        filterText="{=filterText=}"
                        on-pressEnter="pressEnter"
                    >
                    </sand-input>
                </div>
            </div>
            <sand-spin
                class="sand-spin"
                tip="generating flame-graph-data.."
                spinning="{{flameLoading}}"
            />
            <div class="sand-d3-flame-container">
                <sand-flame
                    theme="warm"
                    flameWidth="{{flameWidth}}"
                    tipFn="{{flameTipFn}}"
                    inverted="{{true}}"
                    flameSearchMatch="{{flameSearchMatch}}"
                    data="{{flameData}}"
                    highlightColor="#1968fa"
                    filterText="{{flameTerm}}"
                    on-click="flameHighlight"
                />
            </div>
            <div class="sand-d3-flame-footer">
                <span
                    class="sand-flame-action-icon sand-d3-flame-close"
                    on-click="flameClick"
                >
                    <san-icon type="close"></san-icon>
                </span>
                <span
                    class="sand-flame-action-icon sand-d3-flame-reset"
                    on-click="changeFlameWidth"
                >
                    <san-icon type="reset"></san-icon>
                </span>
            </div>
        </div>
    </div>
</template>

<script>
    import san, { DataTypes } from 'san';
    import { connectStore, store } from '@frontend/store/index';
    import {PROFILER_RECORD, INSPECT_HIGHLIGHT, PROFILER_GET_INFO} from '@shared/protocol';

    import { Table, Menu, Icon as StandIcon, Tooltip, Spin } from 'santd';
    import DropDown from 'santd/es/dropdown';
    import 'santd/es/dropdown/style/index.less';

    import Icon from '@frontend/components/icon/icon.san';
    import SdInput from '@frontend/components/input/input.san';
    import Flame from '@frontend/components/flame/flame.san';

    import { toLocaleDatetime } from '@shared/utils/dateFormator';
    import {getValueByPath} from '@shared/utils/dataProcess';
    import { flameJsonGenerator } from '@frontend/utils/flameJsonGenerator';

    import * as echarts from 'echarts/lib/echarts';
    import 'echarts/lib/chart/pie';
    import 'echarts/lib/component/tooltip';

    const FlAME_WRAPPER_WIDTH_RATIO = 0.8;
    const FlAME_WRAPPER_PADDING_WIDTH = 40;

    const columns = [
        {
            title: 'Type',
            dataIndex: 'type'
        },
        {
            title: 'Count',
            dataIndex: 'count'
        },
        {
            title: 'Total time',
            dataIndex: 'totalTime'
        },
        {
            title: 'Average time',
            dataIndex: 'averageTime'
        }
    ]

    const data = [{
        key: '1',
        type: 'compiled',
        count: '0',
        totalTime: '0 ms',
        averageTime: '0 ms'
    }, {
        key: '2',
        type: 'inited',
        count: '0',
        totalTime: '0 ms',
        averageTime: '0 ms'
    }, {
        key: '3',
        type: 'created',
        count: '0',
        totalTime: '0 ms',
        averageTime: '0 ms'
    }, {
        key: '4',
        type: 'attached',
        count: '0',
        totalTime: '0 ms',
        averageTime: '0 ms'
    }, {
        key: '5',
        type: 'detached',
        count: '0',
        totalTime: '0 ms',
        averageTime: '0 ms'
    }, {
        key: '6',
        type: 'disposed',
        count: '0',
        totalTime: '0 ms',
        averageTime: '0 ms'
    }, {
        key: '7',
        type: 'updated',
        count: '0',
        totalTime: '0 ms',
        averageTime: '0 ms'
    }];

    const pieOptions = {
        tooltip: {
            trigger: 'item',
            formatter: '{a} <br/>{b}: {c} ms ({d}%)'
        },
        series: [
            {
                name: '生命周期平均耗时',
                type: 'pie',
                radius: ['50%', '70%'],
                avoidLabelOverlap: false,
                label: {
                    show: false,
                    position: 'center'
                },
                emphasis: {
                    label: {
                        show: true,
                        fontSize: '18',
                        fontWeight: 'bold'
                    }
                },
                labelLine: {
                    show: true
                },
                data: []
            }
        ]
    }

    export default connectStore({
        bridge: 'bridge',
        profilerInfo: 'profilerInfo',
        profilerTime: 'profilerTime',
        currentTime: 'currentTime'
    })(
        {
            dataTypes: {
                /* props */
                bridge: DataTypes.object,
                profilerInfo: DataTypes.object,
                profilerTime: DataTypes.array,
                currentTime: DataTypes.string,
                /* state */
                columns: DataTypes.array,
                data: DataTypes.array,
                recording: DataTypes.bool,
                selectedKeys: DataTypes.array,
                flameOptions: DataTypes.object,
                showFlame: DataTypes.bool,
                filterText: DataTypes.string,
                flameLoading: DataTypes.bool,
                flameData: DataTypes.object,
                flameWidth: DataTypes.number,
                flameSearchMatch: DataTypes.func,
                flameTipFn: DataTypes.func
            },
            components: {
                'san-table': Table,
                'san-icon': Icon,
                'santd-icon': StandIcon,
                'san-drop-down': DropDown,
                'san-menu': Menu,
                'san-menu-item': Menu.Item,
                'san-tooltip': Tooltip,
                'sand-input': SdInput,
                'sand-spin': Spin,
                'sand-flame': Flame
            },
            computed: {
                // table 数据
                data() {
                    let profilerInfo = this.data.get('profilerInfo');
                    if (!profilerInfo || !profilerInfo.hooks) {
                        return [];
                    }
                    let res = data.map((item, index) => {
                        let hookData = profilerInfo.hooks[`comp-${item.type}`];
                        if (!hookData) {
                            return item;
                        }
                        let { count, totalTime } = hookData;
                        let averageTime = (+totalTime / +count).toFixed(1);
                        totalTime = +totalTime.toFixed(1);
                        let newHookData = {
                            count: count + '',
                            totalTime: `${totalTime} ms`,
                            averageTime: `${averageTime} ms`
                        }
                        return Object.assign({}, item, newHookData);
                    });
                    return res;
                }
            },

            getFlameWidth() {
                const rootDom = document.getElementById('san-devtools-app');
                let flameWidth = 0;
                rootDom &&
                    (flameWidth = rootDom.getBoundingClientRect().width * FlAME_WRAPPER_WIDTH_RATIO - FlAME_WRAPPER_PADDING_WIDTH);
                return flameWidth;
            },

            initData() {
                let flameWidth = this.getFlameWidth();
                return {
                    columns,
                    data,
                    recording: false,
                    selectedKeys: [0],
                    flameOptions: {
                        fill: '#999999'
                    },
                    showFlame: false,
                    // 火焰图相关数据
                    filterText: '',
                    flameLoading: false,
                    flameData: {},
                    flameWidth,
                    flameSearchMatch: (d, term) => {
                        if (!term) {
                            return false;
                        }
                        let text = [d.data.name, d.data.componentId, d.data.hookName];
                        let reg;
                        try {
                            reg = new RegExp(term, 'ig');
                        } catch (err) { return false; }
                        return reg.test(text);
                    },
                    flameTipFn: (d) => {
                        let value = getValueByPath(d, 'data.value', '-');
                        typeof value === 'number' && !isNaN(value) && (value = value.toFixed(2))
                        if ('componentId' in d.data && 'hookName' in d.data) {
                            return `${d.data.name}:${d.data.componentId}:${d.data.hookName}:${value}`;
                        }
                        else {
                            return `生命周期总耗时:${value}`;
                        }
                    }
                }
            },

            attached() {
                // 点击记录性能的时候更新 menu 选中项
                this.watch('profilerTime', value => {
                    // 设置menu选中项
                    let index = value.length - 1 || 0;
                    this.data.set('selectedKeys', [index]);
                });
                // 基于准备好的dom，初始化echarts实例
                this.pie = echarts.init(document.getElementById('sand-pie'));
                // 绘制图表
                this.setPieData();
                this.watch('data', value => {
                    this.setPieData(value);
                });
                // watch 数据来生成火焰图
                this.watch('currentTime', currentTime => {
                    if (this.data.get('showFlame')) {
                        this.data.set('flameLoading', true);
                        this.nextTick(this.generateFlame.bind(this));
                    }
                });
            },

            /**
            * 操作按钮 record，menu，flame 按钮
            */
            // 点击记录性能数据
            record() {
                let recording = !this.data.get('recording');
                this.data.set('recording', recording);
                if (recording) {
                    // 设置开始记录的标记
                    store.dispatch('beginRecord', toLocaleDatetime(new Date(), 'yyyy-MM-dd hh:mm:ss'));
                }
                // 设置火焰图
                this.data.set('showFlame', false);
                this.data.set('flameOptions.fill', '#999999');
                // 重置选中的组件
                this.data.get('bridge').send(PROFILER_GET_INFO, '');
                this.data.get('bridge').send(PROFILER_RECORD, { recording });
            },

            // 选择 menu 查看对应的性能数据
            menuClick({ key }) {
                let profilerTime = this.data.get('profilerTime');
                store.dispatch('setCurrentTime', profilerTime[key]);
            },

            // 点击火焰图按钮
            flameClick() {
                if (this.data.get('recording')) {
                    return;
                }
                let showFlame = this.data.get('showFlame');
                if (showFlame) {
                    this.data.set('showFlame', false);
                    this.data.set('flameOptions.fill', '#999999');
                }
                else {
                    this.data.set('showFlame', true);
                    this.data.set('flameOptions.fill', 'red');
                    this.data.set('flameLoading', true);
                    setTimeout(this.generateFlame.bind(this), 0);
                }
            },

            // 回车搜索火焰图数据
            pressEnter() {
                let filterText = this.data.get('filterText');
                this.data.set('flameTerm', filterText);
            },

            /**
            * 火焰图重新设置宽度按钮
            */
            changeFlameWidth() {
                let flameWidth = this.getFlameWidth();
                this.data.set('flameWidth', flameWidth);
            },

            /**
            * 火焰图相关函数
            */
            // 生成火焰图数据
            generateFlame() {
                let profilerDataStore = store.getState('profilerDataStore');
                let currentTime = store.getState('currentTime');
                currentTime = currentTime.replace(/[\s-:]/ig, '');
                let originData = profilerDataStore[currentTime] || {};
                let flameData = flameJsonGenerator(originData);
                this.data.set('flameLoading', false);
                this.data.set('flameData', flameData);
            },

            // 火焰图点击
            flameHighlight(d) {
                if (!d || !d.data || !d.data.componentId) {
                    return;
                }
                this.data.get('bridge') && this.data.get('bridge').send(INSPECT_HIGHLIGHT, d.data.componentId);
            },

            /**
            * 饼图相关
            */
            setPieData(data = []) {
                let pieData = data.map((item, index) => {
                    return {
                        value: +item.averageTime.replace(' ms', ''),
                        name: item.type
                    }
                });
                pieOptions.series[0].data = pieData;
                this.pie.setOption(pieOptions, true);
            }
        }
    )
</script>

<style lang="less">
    @import '@frontend/views/style/variables.less';
    @start-record-color: #ec3b11;
    .santd-dropdown {
        .santd-dropdown-content {
            .santd-menu {
                border: none !important;
                box-shadow: 0 2px 8px 0 rgba(189, 189, 189, 0.3);
                border-radius: 6px;
                .santd-menu-item-selected {
                    color: #1968fa;
                    background-color: #e6f0ff;
                }
                .santd-menu-item {
                    margin: 0;
                    &:first-child {
                        border-top-left-radius: 6px;
                        border-top-right-radius: 6px;
                    }
                    &:last-child {
                        border-bottom-left-radius: 6px;
                        border-bottom-right-radius: 6px;
                    }
                }
            }
        }
    }
    .sand-profiler-info-wrap {
        height: 100%;
        .sand-guide {
            color: @color-grey;
            text-align: center;
            transform: translateY(-50%);
            position: relative;
            top: 40%;
            font-size: 1.2vw;
            padding: 0 30px;
        }
        .sand-d3-flame-wrapper-hide {
            display: none;
        }
        .sand-d3-flame-wrapper {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            min-height: 180px;
            height: 50%;
            width: 80%;
            overflow: auto;
            padding: 0 20px;
            z-index: 10;
            position: fixed;
            left: 50%;
            background-color: @color-white;
            transform: translateX(-50%);
            top: 30%;
            border-radius: 10px;
            box-shadow: 0 2px 8px 0 rgba(189, 189, 189, 0.3);
            .sand-spin {
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
            }
            .sand-d3-flame-footer {
                display: flex;
                justify-content: center;
                user-select: none;
                .sand-flame-action-icon {
                    cursor: pointer;
                    font-size: 30px;
                    padding: 0 10px;
                }
            }
            .sand-d3-flame-container {
                display: flex;
                justify-content: center;
                padding: 40px 0;
                overflow: auto;
            }
            .sand-d3-flame-loading {
                text-align: center;
                margin: 10px;
            }
            .sand-d3-flame-header {
                display: flex;
                justify-content: flex-start;
                align-items: center;
                padding: 10px 0;
                &-title {
                    display: inline-block;
                    font-size: 16px;
                    font-weight: 600;
                    margin-right: 20px;
                }
                &-filter {
                    flex: 1;
                    padding: 0 10px;
                    display: inline-block;
                }
            }
        }
        .sand-profiler-action {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: flex-start;
            height: 36px;
            &-drop {
                padding: 6px 20px;
                border-radius: 6px;
                user-select: none;
                .sand-drop-icon {
                    transform: rotate(-90deg);
                    margin-left: 20px;
                }
            }
            &-btns-disabled {
                cursor: not-allowed;
            }
            &-icon {
                font-size: 24px;
                display: flex;
                padding: 0 11px;
                .Icon {
                    border: 1px solid transparent;
                }
                .Icon:hover {
                    border-radius: 50%;
                    background-color: @icon-hover-bg-color;
                    border: 1px solid @icon-hover-border-color;
                }
            }
            .start-record {
                color: @start-record-color;
            }
        }
        .sand-profiler-content {
            height: calc(100% - 36px);
            overflow: auto;
            padding-bottom: 10px;
            box-sizing: border-box;
            .sand-profiler-info-table {
                width: 100%;
                background-color: @color-white;
                border-radius: 6px;
                .santd-table {
                    padding: 0 8px;
                    .santd-table-thead > tr > th {
                        border: 0;
                        background: @color-white;
                    }
                    .santd-table-placeholder {
                        padding-top: 80px;
                        padding-bottom: 80px;
                        border: 0;
                    }
                    .santd-table-scroll {
                        border-radius: 18px;
                    }
                    .santd-table-body {
                        table {
                            border: 0 !important;
                        }
                    }
                    .santd-table-tbody > tr {
                        box-shadow: 0 1px 0px 0 @color-white-e;
                    }
                    .santd-table-tbody > tr > td {
                        border: 0;
                        padding: 6px 16px;
                    }
                    .santd-table-tbody > tr:hover:not(.santd-table-expanded-row):not(.santd-table-row-selected) > td {
                        background: @color-blue-l2;
                        &:first-child {
                            border-top-left-radius: 8px;
                            border-bottom-left-radius: 8px;
                        }
                        &:last-child {
                            border-top-right-radius: 8px;
                            border-bottom-right-radius: 8px;
                        }
                    }
                }
            }
            .sand-pie-wrap {
                background-color: @color-white;
                border-radius: 6px;
                margin-top: 16px;
                padding: 16px 24px 0;
                width: 100%;
                .sand-pie-title {
                    font-size: 16px;
                    font-weight: 600;
                }
                .sand-pie {
                    width: 200px;
                    height: 200px;
                    margin: 0 auto;
                }
            }
        }
    }
    .san-devtools-dark {
        .santd-dropdown {
            .santd-dropdown-content {
                .santd-menu {
                    color: @color-white;
                    background: @dark-setting-bg-color;
                    box-shadow: 0 2px 8px 0 @dark-setting-shadow-color;
                    .santd-menu-item-selected {
                        color: @color-white;
                        background-color: @dark-setting-hover-bg-color;
                    }
                    .santd-menu-item:not(:first-child) {
                        border-top: 1px solid @dark-setting-border-top-color;
                    }
                }
            }
        }
        .sand-d3-flame-wrapper {
            color: @color-white;
            background: #272b2e;
            box-shadow: 0 2px 8px 0 @dark-setting-shadow-color;
            .sand-d3-flame-loading {
                color: @color-white;
            }
        }
        .sand-profiler-info-wrap {
            .sand-profiler-action {
                color: @color-white;
                &-icon {
                    .Icon:hover {
                        background-color: @dark-icon-hover-bg-color;
                        border: 1px solid @dark-icon-hover-border-color;
                    }
                }
            }
            .sand-profiler-content {
                .sand-profiler-info-table {
                    background-color: #272b2e;
                    .santd-table {
                        .santd-table-header,
                        .santd-table-body,
                        .santd-table-placeholder,
                        .santd-table-thead > tr > th {
                            background-color: #272b2e !important;
                            color: @color-white;
                        }
                        .santd-empty-description {
                            color: @color-white;
                        }
                        .santd-table-tbody > tr {
                            box-shadow: 0 1px 0px 0 rgba(238, 238, 238, 0.1);
                        }
                        .santd-table-tbody > tr:hover:not(.santd-table-expanded-row):not(.santd-table-row-selected) > td {
                            background: @color-blue-l2;
                        }
                    }
                }
                .sand-pie-wrap {
                    background-color: #272b2e;
                    color: @color-white;
                }
            }
        }
    }
</style>
